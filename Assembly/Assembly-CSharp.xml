<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Assembly-CSharp</name>
  </assembly>
  <members>
    <member name="T:AtkResist">
      <summary>属性耐性を表します。</summary>
    </member>
    <member name="F:AtkResist.Endure">
      <summary>耐性 (0.25倍)</summary>
    </member>
    <member name="F:AtkResist.Immune">
      <summary>免疫 (0倍)</summary>
    </member>
    <member name="F:AtkResist.None">
      <summary>未定義</summary>
    </member>
    <member name="F:AtkResist.Normal">
      <summary>普通 (1倍)</summary>
    </member>
    <member name="F:AtkResist.Resist">
      <summary>抵抗 (0.5倍)</summary>
    </member>
    <member name="F:AtkResist.Vulnerable">
      <summary>脆弱 (2倍)</summary>
    </member>
    <member name="F:AtkResist.Weak">
      <summary>弱点 (1.5倍)</summary>
    </member>
    <member name="T:BattleDiceBehavior">
      <summary>バトル ダイスの振る舞いを操作する機能を提供します。</summary>
    </member>
    <member name="F:BattleDiceBehavior._damageReductionByGuard">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._diceDestroyed">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._diceResultValue">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._flags">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._ignoreKnockback">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._isParrying">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._targetDice">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.abilityList">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.behaviourInCard">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.breakState">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.card">
      <summary>このバトル ダイスを所有するバトル ページ</summary>
    </member>
    <member name="F:BattleDiceBehavior.destroyedTiming">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.forbiddenBonusDice">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.isBonusAttack">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.isBonusEvasion">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.isUsed">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.passingEvasion">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.winAgainstFarAtk">
      <summary></summary>
    </member>
    <member name="M:BattleDiceBehavior.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleDiceBehavior.AddAbility(DiceCardAbilityBase)">
      <summary></summary>
      <param name="ability"></param>
    </member>
    <member name="M:BattleDiceBehavior.AddDiceFace(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleDiceBehavior.AddFlag(DiceFlag)">
      <summary></summary>
      <param name="flag"></param>
    </member>
    <member name="M:BattleDiceBehavior.ApplyDiceStatBonus(DiceStatBonus)">
      <summary>指定したボーナス値をバトル ダイスに適用します。</summary>
      <param name="bonus">バトル ダイスに適用するボーナス値。</param>
    </member>
    <member name="M:BattleDiceBehavior.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="targetDice"></param>
    </member>
    <member name="M:BattleDiceBehavior.CheckUsedBehaviourState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.CopyAbilityAndStat(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleDiceBehavior.DestroyDice(DiceUITiming)">
      <summary></summary>
      <param name="timing"></param>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceMax">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceMin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceVanillaMax">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceVanillaMin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetScope">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GiveDamage(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleDiceBehavior.HasFlag(DiceFlag)">
      <summary></summary>
      <param name="flag"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.IsParrying">
      <summary>マッチ状態であることを示します。</summary>
      <returns>マッチ状態の場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleDiceBehavior.OnEventDiceAbility(DiceCardAbilityBase.DiceCardPassiveType,BattleUnitModel)">
      <summary></summary>
      <param name="dicePassiveType"></param>
      <param name="target"></param>
    </member>
    <member name="M:BattleDiceBehavior.RollDice">
      <summary></summary>
    </member>
    <member name="M:BattleDiceBehavior.SetDamageRedution(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleDiceBehavior.SetDiceEffect(DiceEffectType)">
      <summary></summary>
      <param name="type"></param>
    </member>
    <member name="M:BattleDiceBehavior.SetDiceTypeBonus(System.Int32)">
      <summary></summary>
      <param name="bonus"></param>
    </member>
    <member name="M:BattleDiceBehavior.SetIndex(System.Int32)">
      <summary></summary>
      <param name="index"></param>
    </member>
    <member name="M:BattleDiceBehavior.UpdateDiceFinalValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.BreakAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DamageAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.Detail">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceDestroyed">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceFaceAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceResultDamage">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceResultValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceTypeBonus">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceVanillaValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.EffectType">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.GuardBreakAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.GuardBreakMultiplier">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.Index">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.owner">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.PowerAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.TargetDice">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.Type">
      <summary></summary>
    </member>
    <member name="T:BattleDiceCardModel">
      <summary>バトル ページを表します。</summary>
    </member>
    <member name="F:BattleDiceCardModel.costSpended">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardModel.exhaust">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardModel.owner">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardModel.temporary">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.AddBuf(BattleDiceCardBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleDiceCardModel.AddBufWithoutDuplication(BattleDiceCardBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleDiceCardModel.AddCoolTime(System.Single)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleDiceCardModel.AddCost(System.Int32)">
      <summary></summary>
      <param name="cost"></param>
    </member>
    <member name="M:BattleDiceCardModel.CanAddedEgoCard">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.ChangeFarToNearForMyo">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.CheckDestroyedBuf">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.CopySelf">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.CreateDiceCardBehaviorList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.CreateDiceCardSelfAbilityScript">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.CreatePlayingCard(LOR_DiceSystem.DiceCardXmlInfo)">
      <summary></summary>
      <param name="cardInfo"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetAddedIcon(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetArtworkSrc">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetBehaviourList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetBufList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetBufWithMostPriority">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetCategory">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetGrade">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetID">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetMap">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetOriginCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetPriority">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetPriorityAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetRarity">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSkin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSkinHeight">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSpec">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.HasBuf``1">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.IsOnlyAllyUnit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.IsValidTarget(BattleUnitModel,BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="targetUnit"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleDiceCardModel.OnUseCard(BattleUnitModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:BattleDiceCardModel.RemoveAddedIcon(System.String,System.Int32)">
      <summary></summary>
      <param name="resName"></param>
      <param name="priority"></param>
    </member>
    <member name="M:BattleDiceCardModel.RemoveBuf(BattleDiceCardBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleDiceCardModel.RemoveBuf``1">
      <summary></summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:BattleDiceCardModel.ReserveExhaust">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.ResetCoolTime">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.ResetToOriginalData">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.SetAddedIcon(System.String,System.Int32)">
      <summary></summary>
      <param name="resName"></param>
      <param name="priority"></param>
    </member>
    <member name="M:BattleDiceCardModel.SetCurrentCost(System.Int32)">
      <summary></summary>
      <param name="cost"></param>
    </member>
    <member name="M:BattleDiceCardModel.SetCurrentCostMax">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.SetMaxCooltime(System.Int32)">
      <summary></summary>
      <param name="unitcount"></param>
    </member>
    <member name="M:BattleDiceCardModel.SetPriorityAdder(System.Int32)">
      <summary></summary>
      <param name="v"></param>
    </member>
    <member name="P:BattleDiceCardModel.CurCost">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardModel.CurrentCooltimeValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardModel.MaxCooltimeValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardModel.XmlData">
      <summary></summary>
    </member>
    <member name="T:BattleUnitBuf">
      <summary>キャラクターに付与するバフを表します。</summary>
    </member>
    <member name="F:BattleUnitBuf._owner">
      <summary>バフの所有キャラクター</summary>
    </member>
    <member name="F:BattleUnitBuf.hide">
      <summary>バフのアイコンを非表示にする事を示す値</summary>
    </member>
    <member name="F:BattleUnitBuf.stack">
      <summary>バフのスタック数</summary>
    </member>
    <member name="M:BattleUnitBuf.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.AfterDiceAction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.BeforeLoseHPNotDmg(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.ChangeAttackTarget">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.Destroy">
      <summary>次の幕からこのバフを破棄します。</summary>
    </member>
    <member name="M:BattleUnitBuf.DirectAttack">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetAddTextData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBreakDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBreakDamageReduction(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="behaviourDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBreakDamageReductionRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBufIcon">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetCardCostAdder(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageReduction(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="behaviourDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageReductionRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetFixedTarget">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="cardBuf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetStatBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetUIData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.Init(BattleUnitModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:BattleUnitBuf.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsDestroyed">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsHalfPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmune(KeywordBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmune(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmuneDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsInvincibleBp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsInvincibleHp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsNullifiedPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsTargetable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.OnAddBuf">
      <summary>このバフが付与された時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBuf.OnDie">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitBuf.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnEndBattlePhase">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnEndParrying">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnFriendTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="cardBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.OnHpZero">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitBuf.OnLayerChanged(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:BattleUnitBuf.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnPrintEffect(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnRollDiceInRecounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundEndTheLast">
      <summary>幕の終了時、 <see cref="OnRoundEnd" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundStartAfter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBuf.OnSuccessAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃によるダメージを受けた時に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:BattleUnitBuf.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBuf.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.SpeedDiceBreakedAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.SpeedDiceNumAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:BattleUnitBuf.bufActivatedName">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.bufActivatedNameWithStack">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.bufActivatedText">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.bufKeywordText">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.bufType">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.Hide">
      <summary>バフのアイコンを非表示にする事を示す値を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.independentBufIcon">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.isAssimilation">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.IsControllable">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.keywordIconId">
      <summary>アイコン表示用のキーワードを取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.keywordId">
      <summary>ヘルプ メッセージ用のキーワードを取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.paramInBufDesc">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.positiveType">
      <summary></summary>
    </member>
    <member name="T:BattleUnitBufListDetail">
      <summary>キャラクターに付与されたバフの一覧を表します。</summary>
    </member>
    <member name="M:BattleUnitBufListDetail.#ctor(BattleUnitModel)">
      <summary></summary>
      <param name="model"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddBuf(BattleUnitBuf)">
      <summary>指定したバフをこの幕から付与します。</summary>
      <param name="buf">付与するバフ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddBufWithConnection(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="owner"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddBufWithoutDuplication(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufByCard(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定したバフを次の幕から付与します。このメソッドはバトル ページの効果により付与する場合に呼び出します。</summary>
      <param name="bufType">付与するバフのキーワード。</param>
      <param name="stack">付与するバフの数値。</param>
      <param name="actor">バフを付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufByEtc(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定したバフを次の幕から付与します。このメソッドはバトル ページ以外の効果により付与する場合に呼び出します。</summary>
      <param name="bufType">付与するバフのキーワード。</param>
      <param name="stack">付与するバフの数値。</param>
      <param name="actor">バフを付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufNextNextByCard(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="bufType"></param>
      <param name="stack"></param>
      <param name="actor"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufThisRoundByCard(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定したバフをこの幕から付与します。このメソッドはバトル ページの効果により付与する場合に呼び出します。</summary>
      <param name="bufType">付与するバフのキーワード。</param>
      <param name="stack">付与するバフの数値。</param>
      <param name="actor">バフを付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufThisRoundByEtc(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定したバフをこの幕から付与します。このメソッドはバトル ページ以外の効果により付与する場合に呼び出します。</summary>
      <param name="bufType">付与するバフのキーワード。</param>
      <param name="stack">付与するバフの数値。</param>
      <param name="actor">バフを付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddReadyBuf(BattleUnitBuf)">
      <summary>指定したバフを次の幕から付与します。</summary>
      <param name="buf">付与するバフ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddReadyReadyBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AfterDiceAction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeLoseHPNotDmg(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.CanAddBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeAttackTarget">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckBufCount">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckDestroyedBuf">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckGift(KeywordBuf,BattleUnitModel)">
      <summary></summary>
      <param name="bufType"></param>
      <param name="actor"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.DirectAttack">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetActivatedBuf(KeywordBuf)">
      <summary></summary>
      <param name="bufType"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetActivatedBufList">
      <summary>この幕に適用されているバフの一覧を取得します。</summary>
      <returns>この幕に適用されているバフの一覧。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBreakDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBreakDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBreakDamageReduction(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="behaviourDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBufUIDataList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetCardCostAdder(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageReduction(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="behaviourDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetFixedTargets">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetKewordBufAllStack(KeywordBuf)">
      <summary></summary>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetKewordBufStack(KeywordBuf)">
      <summary></summary>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetNegativeBufTypeCount">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetReadyBuf(KeywordBuf)">
      <summary></summary>
      <param name="bufType"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetReadyBufList">
      <summary>次の幕から適用するバフの一覧を取得します。</summary>
      <returns>次の幕から適用するバフの一覧。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetReadyReadyBufList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetStatBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.HasAssimilation">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.HasBuf``1">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.HasStun">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsControlable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsHalfPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmune(KeywordBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmuneDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsInvincibleBp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsInvincibleHp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsNullifyPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsTargetable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDie">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnEndParrying">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnFriendTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.OnHpZero">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnLayerChanged(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRollDiceInReencounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundEnd">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundEndTheLast">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundStart">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundStartAfter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnSuccessAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃によりダメージを受ける直前に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="dmg">受けるダメージ量。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBuf(BattleUnitBuf)">
      <summary>指定したバフがこのキャラクターに付与されている場合、最初に出現したものを削除します。</summary>
      <param name="buf">削除するバフ オブジェクト。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll(System.Type)">
      <summary>指定した型に一致するバフをこのキャラクターから全て削除します。</summary>
      <param name="buf">削除するバフの型。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll(KeywordBuf)">
      <summary>指定したキーワードに一致するバフをこのキャラクターから全て削除します。</summary>
      <param name="bufType">削除するバフのキーワード。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll(BufPositiveType)">
      <summary></summary>
      <param name="bufPositiveType"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.SpeedDiceBreakAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.SpeedDiceNumAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:BattleUnitModel">
      <summary>バトル キャラクターを表します。</summary>
    </member>
    <member name="F:BattleUnitModel.aggroDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.allyCardDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.battleCardResultLog">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.breakDetail">
      <summary>混乱耐性</summary>
    </member>
    <member name="F:BattleUnitModel.bufListDetail">
      <summary>付与されたバフの一覧</summary>
    </member>
    <member name="F:BattleUnitModel.cardHistory">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.cardOrder">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.cardSlotDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.currentDiceAction">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.currentSpeedDiceIdx">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.direction">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.disposed">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.equipment">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.faction">
      <summary>敵または味方の派閥。</summary>
    </member>
    <member name="F:BattleUnitModel.forceRetreat">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.formation">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.history">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.ignoreBloodyEffect">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.index">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.isRegister">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.isTauntable">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.lastAttacker">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.moveDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.passiveDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.personalEgoDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.savedCardDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.speedDiceResult">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.stopped">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.targetSetter">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.turnState">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.view">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.#ctor(System.Int32)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:BattleUnitModel.AddSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.AfterDiceAction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.AfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.AfterTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.AllowTargetChanging(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.BeforeLoseHPNotDmg(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CanChangeAttackTarget(BattleUnitModel,System.Int32,System.Int32)">
      <summary></summary>
      <param name="target"></param>
      <param name="myIndex"></param>
      <param name="targetIndex"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeBaseDeck(System.Collections.Generic.List{LOR_DiceSystem.DiceCardXmlInfo},System.Int32)">
      <summary></summary>
      <param name="cardList"></param>
      <param name="drawNum"></param>
    </member>
    <member name="M:BattleUnitModel.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeDeck(System.Int32)">
      <summary></summary>
      <param name="index"></param>
    </member>
    <member name="M:BattleUnitModel.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeTemporaryDeck(System.Collections.Generic.List{System.Int32},System.Int32)">
      <summary></summary>
      <param name="cardIdList"></param>
      <param name="drawNum"></param>
    </member>
    <member name="M:BattleUnitModel.CheckCardAvailable(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CheckCardAvailableForPlayer(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ConnectBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitModel.Die(BattleUnitModel,System.Boolean)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="callEvent"></param>
    </member>
    <member name="M:BattleUnitModel.DieFake">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.DirectAttack">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.Extinct(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetCurrentSpeed">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetFixedTargets">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistBP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistBP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistHP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistHP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetSpeed(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetSpeedDiceResult(System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetTakenGuardBreakDamageAdder(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsAttackable(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsBreakLifeZero">
      <summary>混乱耐性がゼロである事を示します。</summary>
      <returns>混乱耐性がゼロの場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitModel.IsControlable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsHalfPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmune(KeywordBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmuneDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsInvincibleBp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsInvincibleHp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsNullifyPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.LoseHp(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnAddKeywordBufByCardForEvent(KeywordBuf,System.Int32,BufReadyType)">
      <summary></summary>
      <param name="bufType"></param>
      <param name="stack"></param>
      <param name="readyType"></param>
    </member>
    <member name="M:BattleUnitModel.OnApplyCard(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnBattleEnd">
      <summary>舞台の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitModel.OnBattleEnd_alive">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnBreakGageZero">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnCapturedAsTarget(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
    </member>
    <member name="M:BattleUnitModel.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.OnDie(System.Boolean)">
      <summary></summary>
      <param name="callEvent"></param>
    </member>
    <member name="M:BattleUnitModel.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitModel.OnDiscardByAbility(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cards"></param>
    </member>
    <member name="M:BattleUnitModel.OnDispose">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndFarAreaPlay">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnEndOneSideAction(System.Boolean)">
      <summary></summary>
      <param name="wasAttacker"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndOneSideAction_Before(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndOnSideActionVictim_Before(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndParrying">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnEndParrying_Before(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEnemyRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnFixedUpdate(System.Single)">
      <summary></summary>
      <param name="deltaTime"></param>
    </member>
    <member name="M:BattleUnitModel.OnFixedUpdateInWaitPhase(System.Single)">
      <summary></summary>
      <param name="delta"></param>
    </member>
    <member name="M:BattleUnitModel.OnGainChargeStack">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnHpZero">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.OnLayerChanged(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:BattleUnitModel.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnMakeBreakState(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.OnOtherUnitReservedCostChanged(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="cur"></param>
    </member>
    <member name="M:BattleUnitModel.OnParryingStart(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.OnRecoverHp(System.Int32)">
      <summary></summary>
      <param name="recoverAmount"></param>
    </member>
    <member name="M:BattleUnitModel.OnReleaseBreak">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnRollDiceInRecounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEnd">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEnd_after">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEndTheLast">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEndTheLast_ignoreDead">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStart">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStart_before">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStartOnlyUI">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnSelectCardAuto(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="origin"></param>
      <param name="currentDiceSlotIdx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnStartBattle">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnStartCardAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnStartOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnStartTargetedByAreaAtk(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnSucceedAttack(BattleDiceBehavior,BattleUnitModel)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.OnTakeBreakDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="breakdmg"></param>
    </member>
    <member name="M:BattleUnitModel.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.OnUseChargeStack">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnWaveStart">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.RecoverBreakLife(System.Int32,System.Boolean)">
      <summary></summary>
      <param name="v"></param>
      <param name="ignore"></param>
    </member>
    <member name="M:BattleUnitModel.RecoverHP(System.Int32)">
      <summary>指定した値だけキャラクターの体力を回復します。</summary>
      <param name="v">回復する体力の数値。</param>
    </member>
    <member name="M:BattleUnitModel.ResetBreakGauge">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.ResetTurn">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.ReturnToOriginalDeck">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.Revive(System.Int32)">
      <summary></summary>
      <param name="recoverHp"></param>
    </member>
    <member name="M:BattleUnitModel.RollSpeedDice">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.SetAllSpeedDiceValueAdder(System.Int32)">
      <summary></summary>
      <param name="adder"></param>
    </member>
    <member name="M:BattleUnitModel.SetCurrentOrder(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
    </member>
    <member name="M:BattleUnitModel.SetDeadSceneBlock(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleUnitModel.SetHp(System.Int32)">
      <summary></summary>
      <param name="newHp"></param>
    </member>
    <member name="M:BattleUnitModel.SetRole">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.SetSpeedDiceValueAdder(System.Int32,System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <param name="adder"></param>
    </member>
    <member name="M:BattleUnitModel.SetTimeScale(System.Single)">
      <summary></summary>
      <param name="timeScale"></param>
    </member>
    <member name="M:BattleUnitModel.SetUnitData(UnitBattleDataModel)">
      <summary></summary>
      <param name="unitBattleData"></param>
    </member>
    <member name="M:BattleUnitModel.ShowPassiveTypo(PassiveAbilityBase)">
      <summary></summary>
      <param name="passive"></param>
    </member>
    <member name="M:BattleUnitModel.ShowTypoTemporary(BattleEmotionCardModel,System.Int32,ResultOption,System.Int32[])">
      <summary></summary>
      <param name="emotionPassive"></param>
      <param name="index"></param>
      <param name="option"></param>
      <param name="param"></param>
    </member>
    <member name="M:BattleUnitModel.SpendCardAndCost(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.TakeBreakDamage(System.Int32,DamageType,BattleUnitModel,AtkResist)">
      <summary></summary>
      <param name="damage"></param>
      <param name="type"></param>
      <param name="attacker"></param>
      <param name="atkResist"></param>
    </member>
    <member name="M:BattleUnitModel.TakeDamage(System.Int32,DamageType,BattleUnitModel)">
      <summary></summary>
      <param name="v"></param>
      <param name="type"></param>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.UpdateDirection(UnityEngine.Vector3)">
      <summary></summary>
      <param name="targetPos"></param>
    </member>
    <member name="M:BattleUnitModel.UpdateUnitData">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.Book">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.customBook">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.emotionDetail">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.formationCellPos">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.hp">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.id">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.IsDeadSceneBlock">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.MaxBreakLife">
      <summary>最大混乱耐性を取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.MaxHp">
      <summary>最大体力を取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.MaxPlayPoint">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.PlayPoint">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.Team">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.UnitData">
      <summary></summary>
    </member>
    <member name="T:BookModel">
      <summary>キャラクターが装着するコア ページを表します。</summary>
    </member>
    <member name="F:BookModel._exp">
      <summary></summary>
    </member>
    <member name="F:BookModel._level">
      <summary></summary>
    </member>
    <member name="F:BookModel.basicBookOwner">
      <summary></summary>
    </member>
    <member name="F:BookModel.hBpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.hHpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.instanceId">
      <summary>ページ ID</summary>
    </member>
    <member name="F:BookModel.originData">
      <summary></summary>
    </member>
    <member name="F:BookModel.owner">
      <summary></summary>
    </member>
    <member name="F:BookModel.pBpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.pHpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.reservedData">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_bookmark">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck2">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck3">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck4">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_equipedbookList">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_equipedpassivebookInstanceId">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_exp">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_id">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_instanceId">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_invenlock">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_level">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_passiveList">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_ver2level">
      <summary></summary>
    </member>
    <member name="F:BookModel.sBpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.sHpResist">
      <summary></summary>
    </member>
    <member name="M:BookModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:BookModel.#ctor(BookXmlInfo)">
      <summary></summary>
      <param name="classInfo"></param>
    </member>
    <member name="M:BookModel.AddCardFromInventoryToCurrentDeck(System.Int32)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ApplyPassiveSuccession">
      <summary></summary>
    </member>
    <member name="M:BookModel.CanEquipBookByGivePassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CanSuccessionPassive(PassiveModel,GivePassiveState@)">
      <summary></summary>
      <param name="targetpassive"></param>
      <param name="haspassiveState"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.CanSuccessionPassiveByCost(PassiveModel,PassiveModel,System.Boolean)">
      <summary></summary>
      <param name="prevpassive"></param>
      <param name="nextpassive"></param>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.CanToGivePassiveBook(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ChangeDeck(System.Int32)">
      <summary></summary>
      <param name="index"></param>
    </member>
    <member name="M:BookModel.ChangePassive(PassiveModel,PassiveModel)">
      <summary></summary>
      <param name="currentBookPassive"></param>
      <param name="changeBookPassive"></param>
    </member>
    <member name="M:BookModel.CheckCustomCoreBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CheckExistPassiveBook">
      <summary></summary>
    </member>
    <member name="M:BookModel.CheckOverPassiveCost(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:BookModel.ContainsCategory(BookCategory)">
      <summary></summary>
      <param name="category"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.CopyCurrentDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CreateBookForWorkshop">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CreateDeckByDeckInfo(System.Boolean)">
      <summary></summary>
      <param name="isInventoryDeck"></param>
    </member>
    <member name="M:BookModel.CreatePassiveList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CreateSoulCard(System.Int32)">
      <summary></summary>
      <param name="emotionLevel"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.EmptyDeckToInventory">
      <summary></summary>
    </member>
    <member name="M:BookModel.EmptyDeckToInventoryAll">
      <summary></summary>
    </member>
    <member name="M:BookModel.EquipGivePassiveBook(BookModel)">
      <summary></summary>
      <param name="book"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.FeedBook(BookModel)">
      <summary></summary>
      <param name="book"></param>
    </member>
    <member name="M:BookModel.FillDeckFromInventory(System.Int32)">
      <summary></summary>
      <param name="deckid"></param>
    </member>
    <member name="M:BookModel.GainExp(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetBookCategories">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetBookClassInfoId">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetBookMarkState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCanHasPassiveNum">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardCount(System.Int32)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardListByIndex(System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardListFromAllDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardListFromCurrentDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCharacterName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCurrentDeckIndex">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCurrentPassiveCost(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetDeckAll_nocopy">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetDeckCardModelAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetDeckSize">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetEquipedBookList(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetFeedExp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetGiveBookModel">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetLimit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetLockInventoryState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxExp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxExp(System.Int32)">
      <summary></summary>
      <param name="level"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxLevel">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxPassiveCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxPlayPoint">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetOnlyCards">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetOriginalCharcterName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetPassiveBookState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetPassiveInfoList(System.Boolean)">
      <summary>装備中のパッシブ情報のリストを取得します。</summary>
      <param name="onlyActivated">(未使用パラメータ)</param>
      <returns>パッシブ情報のリスト。</returns>
    </member>
    <member name="M:BookModel.GetPassiveModelList">
      <summary>装備中のパッシブ モデル (ローカライズに影響しないパッシブ情報をモデル化したオブジェクト) のリストを取得します。</summary>
      <returns>装備中のパッシブ モデルのリスト。</returns>
    </member>
    <member name="M:BookModel.GetPossibleRemainCost(PassiveModel,System.Boolean)">
      <summary></summary>
      <param name="ownequipedPassive"></param>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetRarity">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetRarityText">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistBP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistBP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistBP_Text(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="atkResist"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistHP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistHP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistHP_Text(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="atkResist"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistRate(AtkResist)">
      <summary></summary>
      <param name="atkResist"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSoulCards">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSpeedDiceRule(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSpeedDiceText">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetStartDraw">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetStartPlayPoint">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSuccessionPassivesByBook(BookModel,System.Boolean)">
      <summary></summary>
      <param name="book"></param>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetThumbPath">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.InitReservedDataForPassiveSuccession">
      <summary></summary>
    </member>
    <member name="M:BookModel.IsBasicBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsDeckLocked">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsEmptyDeck(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsEmptyDeckAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsEquipedPassiveBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.isExistGivePassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsFixedDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsMaxCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsMultiDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsNotFullEquipPassiveBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.LoadFromSaveData(GameSave.SaveData)">
      <summary>指定したページのセーブ データを読み込みます。</summary>
      <param name="data">ページの情報が格納されたセーブ データ。</param>
    </member>
    <member name="M:BookModel.LoadFromSaveDataExceptId(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:BookModel.MoveCardFromCurrentDeckToInventory(System.Int32)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ReleaseAllEquipedPassiveBooks(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:BookModel.ReleasePassive(PassiveModel,System.Boolean)">
      <summary></summary>
      <param name="passive"></param>
      <param name="origin"></param>
    </member>
    <member name="M:BookModel.ResisterBookMark(System.Boolean)">
      <summary></summary>
      <param name="on"></param>
    </member>
    <member name="M:BookModel.SetBasicBookOwner(UnitDataModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:BookModel.SetBp(System.Int32)">
      <summary></summary>
      <param name="maxBp"></param>
    </member>
    <member name="M:BookModel.SetCharacterName(System.String)">
      <summary></summary>
      <param name="s"></param>
    </member>
    <member name="M:BookModel.SetHp(System.Int32)">
      <summary></summary>
      <param name="maxHp"></param>
    </member>
    <member name="M:BookModel.SetLevel(System.Int32)">
      <summary></summary>
      <param name="targetLevel"></param>
    </member>
    <member name="M:BookModel.SetLockInventory(System.Boolean)">
      <summary></summary>
      <param name="on"></param>
    </member>
    <member name="M:BookModel.SetMaxPlayPoint(System.Int32)">
      <summary></summary>
      <param name="maxPoint"></param>
    </member>
    <member name="M:BookModel.SetOriginalCharacterName">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalPlayPoint">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalResists">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalSpeed">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalStat">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOwner(UnitDataModel)">
      <summary></summary>
      <param name="newOwner"></param>
    </member>
    <member name="M:BookModel.SetResistBP(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="resist"></param>
    </member>
    <member name="M:BookModel.SetResistHP(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="resist"></param>
    </member>
    <member name="M:BookModel.SetSpeedDiceMax(System.Int32)">
      <summary></summary>
      <param name="maxValue"></param>
    </member>
    <member name="M:BookModel.SetSpeedDiceMin(System.Int32)">
      <summary></summary>
      <param name="minValue"></param>
    </member>
    <member name="M:BookModel.SetStartPlayPoint(System.Int32)">
      <summary></summary>
      <param name="playPoint"></param>
    </member>
    <member name="M:BookModel.SortPassive(System.Collections.Generic.List{PassiveModel})">
      <summary></summary>
      <param name="passivelist"></param>
    </member>
    <member name="M:BookModel.Test2">
      <summary></summary>
    </member>
    <member name="M:BookModel.TryGainPassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.TryGainUniquePassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.UnEquipGivePassiveBook(BookModel,System.Boolean)">
      <summary></summary>
      <param name="unequipbook"></param>
      <param name="origin"></param>
    </member>
    <member name="P:BookModel.AddedStartDraw">
      <summary></summary>
    </member>
    <member name="P:BookModel.bookIcon">
      <summary></summary>
    </member>
    <member name="P:BookModel.bookIconGlow">
      <summary></summary>
    </member>
    <member name="P:BookModel.Break">
      <summary></summary>
    </member>
    <member name="P:BookModel.ClassInfo">
      <summary>StaticInfo (EquipPage.txt) に定義されたページ情報を取得します。</summary>
    </member>
    <member name="P:BookModel.DeadLine">
      <summary></summary>
    </member>
    <member name="P:BookModel.EmotionLevel">
      <summary></summary>
    </member>
    <member name="P:BookModel.equipeffect">
      <summary></summary>
    </member>
    <member name="P:BookModel.Exp">
      <summary></summary>
    </member>
    <member name="P:BookModel.HP">
      <summary></summary>
    </member>
    <member name="P:BookModel.HpReduction">
      <summary></summary>
    </member>
    <member name="P:BookModel.IsRandomFace">
      <summary></summary>
    </member>
    <member name="P:BookModel.Level">
      <summary></summary>
    </member>
    <member name="P:BookModel.Name">
      <summary>ページ名を取得します。</summary>
    </member>
    <member name="P:BookModel.Rarity">
      <summary></summary>
    </member>
    <member name="P:BookModel.SpeedMax">
      <summary></summary>
    </member>
    <member name="P:BookModel.SpeedMin">
      <summary></summary>
    </member>
    <member name="T:DiceCardAbilityBase">
      <summary>バトル ページのバトル ダイスに付与された効果を表す基底クラスです。全てのバトル ダイス効果はこのクラスを派生して実装されます。</summary>
    </member>
    <member name="F:DiceCardAbilityBase.behavior">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.#ctor">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.ActivateBonusAttackDice">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.AfterAction">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeGiveDamage">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeGiveDamage(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeRollDice_Target(BattleDiceBehavior)">
      <summary></summary>
      <param name="targetDice"></param>
    </member>
    <member name="M:DiceCardAbilityBase.BeforRollDice">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.GetKeywords">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.GetMaximumPercentDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.IsDoublePower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.OnDrawParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnLoseParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnRollDice">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnSucceedAreaAttack(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:DiceCardAbilityBase.OnSucceedAttack">
      <summary>攻撃の的中時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnSucceedAttack(BattleUnitModel)">
      <summary>攻撃の的中時に呼び出されます。</summary>
      <param name="target">攻撃対象のキャラクター。</param>
    </member>
    <member name="M:DiceCardAbilityBase.OnWinParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnWinParryingDefense">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.card">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.Invalidity">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.IsPercentDmg">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.Keywords">
      <summary>ヘルプ メッセージ用のキーワードを取得します。</summary>
    </member>
    <member name="P:DiceCardAbilityBase.owner">
      <summary></summary>
    </member>
    <member name="T:DiceCardSelfAbilityBase">
      <summary>バトル ページそのものに付与された効果を表す基底クラスです。全てのバトル ページ効果はこのクラスを派生して実装されます。</summary>
    </member>
    <member name="F:DiceCardSelfAbilityBase.card">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.#ctor">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.AfterAction">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.AfterGiveDamage(System.Int32)">
      <summary></summary>
      <param name="damage"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.BeforeAddToHand(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.GetCostAdder(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.GetCostLast(BattleUnitModel,BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="oldCost"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsFixedCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsOnlyAllyUnit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsTargetChangable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsTrueDamage">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsValidTarget(BattleUnitModel,BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="targetUnit"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnApplyCard">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnChooseCard(BattleUnitModel)">
      <summary>手札からこのバトルページを選択しようとした時に呼び出されます。</summary>
      <param name="owner">バトルページを選択しようとしたキャラクター。</param>
      <returns>このバトルページを選択できる場合は true、選択できない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnDiscard(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnEndAreaAttack">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnEndBattle">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnEnterCardPhase(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnReleaseCard">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnRollAreaAttack">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartBattle">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartOneSideAction">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAreaAttack(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAtkEvent">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAttack">
      <summary>攻撃の的中時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedDefense">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedDefEvent">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseCard">
      <summary>バトル ページが使用された時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseCardEvent">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseInstance(BattleUnitModel,BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="targetUnit"></param>
    </member>
    <member name="P:DiceCardSelfAbilityBase.Keywords">
      <summary>ヘルプ メッセージ用のキーワードを取得します。</summary>
    </member>
    <member name="P:DiceCardSelfAbilityBase.owner">
      <summary>このバトル ページ効果を持つバトル ページの所有キャラクターを取得します。</summary>
    </member>
    <member name="T:DiceStatBonus">
      <summary>バトル ダイスに付与するボーナス値を表します。</summary>
    </member>
    <member name="F:DiceStatBonus.breakDmg">
      <summary>混乱ダメージ</summary>
    </member>
    <member name="F:DiceStatBonus.breakRate">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.dmg">
      <summary>ダメージ</summary>
    </member>
    <member name="F:DiceStatBonus.dmgRate">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.face">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.guardBreakAdder">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.guardBreakMultiplier">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.ignorePower">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.max">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.min">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.power">
      <summary>ダイス威力</summary>
    </member>
    <member name="M:DiceStatBonus.#ctor">
      <summary>
        <see cref="DiceStatBonus" /> の新しいインスタンスを生成します。</summary>
    </member>
    <member name="M:DiceStatBonus.Copy">
      <summary>このインスタンスのディープ コピーを作成して返します。</summary>
      <returns></returns>
    </member>
    <member name="T:Faction">
      <summary>敵または味方の派閥を表します。</summary>
    </member>
    <member name="F:Faction.Enemy">
      <summary>敵</summary>
    </member>
    <member name="F:Faction.Player">
      <summary>味方</summary>
    </member>
    <member name="T:GiftInventory">
      <summary>戦闘表象のインベントリです。このオブジェクトは保存可能です。</summary>
    </member>
    <member name="F:GiftInventory.save_equipList">
      <summary></summary>
    </member>
    <member name="F:GiftInventory.save_offList">
      <summary></summary>
    </member>
    <member name="F:GiftInventory.save_unequipList">
      <summary></summary>
    </member>
    <member name="M:GiftInventory.#ctor(UnitDataModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:GiftInventory.AddGift(System.Int32)">
      <summary>指定した ID の戦闘表象をインベントリに追加します。</summary>
      <param name="id">追加する戦闘表象の ID。</param>
      <returns>追加に成功した場合はその戦闘表象オブジェクト、既に追加済みまたは追加できなかった場合は null を返します。</returns>
    </member>
    <member name="M:GiftInventory.AddGift(GiftModel)">
      <summary>指定した戦闘表象をインベントリに追加します。</summary>
      <param name="gift">追加する戦闘表象。</param>
      <returns>追加に成功した場合はその戦闘表象オブジェクト、既に追加済みまたは追加できなかった場合は null を返します。</returns>
    </member>
    <member name="M:GiftInventory.AlreadyGained(GiftModel)">
      <summary>指定した戦闘表象が既に入手済みである事を示す値を返します。</summary>
      <param name="gift">戦闘表象。</param>
      <returns>入手済みの場合は true、未入手の場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.AlreadyGained(System.Int32)">
      <summary>指定した ID の戦闘表象が既に入手済みである事を示す値を返します。</summary>
      <param name="id">戦闘表象の ID。</param>
      <returns>入手済みの場合は true、未入手の場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.AlreadyGained(GiftXmlInfo)">
      <summary></summary>
      <param name="gift"></param>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.Equip(GiftModel)">
      <summary>指定した戦闘表象を装備します。</summary>
      <param name="gift">装備する戦闘表象。</param>
      <returns>装備した場合は true、既に装備済みまたは装備できなかった場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.GetAllGiftsListForTitle">
      <summary>所持している全ての戦闘表象のリストを取得します。このメソッドにより取得したリストでは戦闘表象インベントリを変更できません。</summary>
      <returns>所持している全ての戦闘表象のリスト。</returns>
    </member>
    <member name="M:GiftInventory.GetEquippedList">
      <summary>装備中の戦闘表象のリストを取得します。このメソッドにより取得したリストでは戦闘表象インベントリを変更できます。</summary>
      <returns>装備中の戦闘表象のリスト。</returns>
    </member>
    <member name="M:GiftInventory.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Amp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Break">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_BreakRecover">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Dmg(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Hp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Tune">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetUnequippedList">
      <summary>装備から外している戦闘表象のリストを取得します。このメソッドにより取得したリストでは戦闘表象インベントリを変更できます。</summary>
      <returns>装備から外している戦闘表象のリスト。</returns>
    </member>
    <member name="M:GiftInventory.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:GiftInventory.UnEquip(GiftModel)">
      <summary>指定した戦闘表象を装備から外します。</summary>
      <param name="gift">装備から外す戦闘表象。</param>
      <returns>装備から外した場合は true、既に外していたまたは外せなかった場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.UnEquipAll">
      <summary></summary>
    </member>
    <member name="T:KeywordBuf">
      <summary>キーワード定義されたバフを表します。</summary>
    </member>
    <member name="F:KeywordBuf.AllPowerUp">
      <summary>威力増加 (全てのダイスの威力を X 増加)</summary>
    </member>
    <member name="F:KeywordBuf.Binding">
      <summary>束縛 (今回の幕において、速度の値が X 減少。)</summary>
    </member>
    <member name="F:KeywordBuf.Bleeding">
      <summary>出血 (今回の幕の間、攻撃ダイスを振るたびに X ダメージを受けて出血値が 2/3 に減少する)</summary>
    </member>
    <member name="F:KeywordBuf.BloodStackBlock">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Blurry">
      <summary>朦朧 (朦朧ではない他の対象がいる場合、このキャラクターを相手に選べない。幕の終了時に解除される)</summary>
    </member>
    <member name="F:KeywordBuf.BreakProtection">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Burn">
      <summary>火傷 (幕の終了時、X ダメージを受け、火傷の数値が 2/3 に減少する。(小数点切り捨て))</summary>
    </member>
    <member name="F:KeywordBuf.BurnBreak">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.BurnSpread">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_BigBadWolf_Stealth">
      <summary>影 (狼が使用するバトル ページの対象でない司書は行動不能)</summary>
    </member>
    <member name="F:KeywordBuf.CB_BlackSwanDeadBro">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_CopiousBleeding">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_NothingMimic">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_NothingSkin">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_RedHoodTarget">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_UniverseDecreaseMaxBp">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Decay">
      <summary>腐食 (幕の終了時、X ダメージを受けて数値が1減少する。(被ダメージ時、腐食の数だけ物理・混乱追加ダメージを受ける))</summary>
    </member>
    <member name="F:KeywordBuf.DecreaseSpeedTo1">
      <summary>速度固定1 (今回の幕の間、速度ダイスの値を1に固定)</summary>
    </member>
    <member name="F:KeywordBuf.DefensePowerUp">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Disarm">
      <summary>武装解除 (今回の幕の間、守備ダイスの威力 -X)</summary>
    </member>
    <member name="F:KeywordBuf.DmgUp">
      <summary>ダメージ量増加 (今回の幕の間、攻撃ダイスのダメージ量 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Endurance">
      <summary>忍耐 (今回の幕の間、守備ダイスの威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Fairy">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.FairyCare">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.FreischutzChange">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.HalfPower">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.HitPowerUp">
      <summary>打撃威力増加 (今回の幕の間、打撃威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.IndexRelease">
      <summary>解禁 (全てのダイス威力 +1)</summary>
    </member>
    <member name="F:KeywordBuf.KnightOfDespairBlessing">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Maxim">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.MyoBerserk">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.NicolaiTarget">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.None">
      <summary>バフなし</summary>
    </member>
    <member name="F:KeywordBuf.NullifyPower">
      <summary>威力無効化 (今回の幕の間、威力の影響を受けない)</summary>
    </member>
    <member name="F:KeywordBuf.Paralysis">
      <summary>麻痺 (今回の幕の間、カード使用時のダイスを最大 X 個まで弱体化する)</summary>
    </member>
    <member name="F:KeywordBuf.PenetratePowerUp">
      <summary>貫通威力増加 (今回の幕の間、貫通威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Protection">
      <summary>保護 (今回の幕の間、攻撃によって受けるダメージ量が X 減少)</summary>
    </member>
    <member name="F:KeywordBuf.PurpleCoolTime">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.PurpleDefense">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.PurpleHit">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.PurplePenetrate">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.PurpleSlash">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.QueenOfHatredHatred">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.QueenOfHatredSign">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Quickness">
      <summary>クイック (今回の幕において、速度の値が X 増加)</summary>
    </member>
    <member name="F:KeywordBuf.RedHoodChange">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.RedMist">
      <summary>赤い霧 (全てのダイス威力 +X。最大で 5 まで得られる)</summary>
    </member>
    <member name="F:KeywordBuf.RedMistEgo">
      <summary>E.G.O発現 (「大切断-縦」が使用可能に。全てのダイス威力が 2 増加。毎幕ごとに 40 ダメージ以上与えられない場合、混乱ダメージを受ける。混乱状態になると「E.G.O発現」状態が解除される)</summary>
    </member>
    <member name="F:KeywordBuf.RedShoes">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Regeneration">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Seal">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SealKeyword">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Shock">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SingingMachineRecital">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SlashPowerUp">
      <summary>斬撃威力増加 (今回の幕の間、斬撃威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Smoke">
      <summary>煙 (受けるダメージ量 X% 増加。最大 10 まで得ることができる。煙の数値が 9 以上ならすべてのダイス威力 +1。幕の終了時に煙の数値が 1 減少)</summary>
    </member>
    <member name="F:KeywordBuf.SnowQueenPower">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SpiderBudCocoon">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Strength">
      <summary>パワー (今回の幕の間、攻撃ダイスの威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Stun">
      <summary>行動不能 (今回の幕の間、行動できない)</summary>
    </member>
    <member name="F:KeywordBuf.SweeperDup">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SweeperRevival">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.TakeBpDmg">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.TeddyLove">
      <summary>愛情 (この対象を攻撃するとき、現在の値だけ攻撃者の威力を増加)</summary>
    </member>
    <member name="F:KeywordBuf.UniverseCardBuf">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.UniverseEnlightenment">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Vibrate">
      <summary>振動 (???)</summary>
    </member>
    <member name="F:KeywordBuf.Vulnerable">
      <summary>脆弱 (今回の幕の間、攻撃によって受けるダメージ量が X 増加)</summary>
    </member>
    <member name="F:KeywordBuf.Vulnerable_break">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.WarpCharge">
      <summary>充電 (充電の数値によって特定バトルページの能力が上昇。最大 10 まで獲得可能)</summary>
    </member>
    <member name="F:KeywordBuf.Weak">
      <summary>虚弱 (今回の幕の間、攻撃ダイスの威力 -X)</summary>
    </member>
    <member name="F:KeywordBuf.WhiteNightChange">
      <summary></summary>
    </member>
    <member name="T:LOR_DiceSystem.CardRange">
      <summary>バトル ページの攻撃範囲を表します。</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Far">
      <summary>遠距離攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.FarArea">
      <summary>広域攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.FarAreaEach">
      <summary>個別広域攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Instance">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Near">
      <summary>接近攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Special">
      <summary>特殊攻撃</summary>
    </member>
    <member name="T:PassiveAbilityBase">
      <summary>パッシブの基底クラスです。全てのパッシブはこのクラスを派生して実装されます。</summary>
    </member>
    <member name="F:PassiveAbilityBase._bHide">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.desc">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.destroyed">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.disabled">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.isNegative">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.level">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.name">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.owner">
      <summary>パッシブの所有キャラクター</summary>
    </member>
    <member name="F:PassiveAbilityBase.rare">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.#ctor">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.AfterGiveDamage(System.Int32)">
      <summary></summary>
      <param name="damage"></param>
    </member>
    <member name="M:PassiveAbilityBase.AfterTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:PassiveAbilityBase.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:PassiveAbilityBase.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.CanAddBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.CanTakeTargeting">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeDiceResult(BattleDiceBehavior,System.Int32@)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="diceResult"></param>
    </member>
    <member name="M:PassiveAbilityBase.ChangeSubTargets(BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="card"></param>
      <param name="mainTarget"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.DontChangeResistByBreak">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetBreakDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetBreakDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMaxBpBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMaxHpBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetStartHp(System.Single)">
      <summary></summary>
      <param name="hp"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetTakenGuardBreakDamageAdder(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.Init(BattleUnitModel)">
      <summary></summary>
      <param name="self"></param>
    </member>
    <member name="M:PassiveAbilityBase.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmune(KeywordBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmuneDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsNearOrFar(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnAddKeywordBufByCardForEvent(KeywordBuf,System.Int32,BufReadyType)">
      <summary></summary>
      <param name="keywordBuf"></param>
      <param name="stack"></param>
      <param name="readyType"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnBattleEnd">
      <summary>舞台の終了時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnBattleEnd_alive">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnBreakGageZero">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnCreated">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnDestroyed">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDie">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDieOtherUnit(BattleUnitModel)">
      <summary>このパッシブの所有キャラクター以外のキャラクターが敵味方を問わず死亡した場合に呼び出されます。</summary>
      <param name="unit">死亡したキャラクター。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnDiscardByAbility(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cards"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnEndBattlePhase">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnEndOneSide">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnEndOneSideVictim(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnEndParrying">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnEndParrying(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnExhaustBullet">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnFixedUpdateInWaitPhase(System.Single)">
      <summary></summary>
      <param name="delta"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnGainChargeStack">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnLevelUpEmotion">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnMakeBreakState(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnOtherUnitReservedCostChanged(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="cur"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnRecoverHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnReleaseBreak">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnRollDiceInRencounter">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEndTheLast">
      <summary>幕の終了時、 <see cref="OnRoundEnd" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEndTheLast_ignoreDead">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundStartAfter">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnSelectCardAuto(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="origin"></param>
      <param name="currentDiceSlotIdx"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnStartBattle">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnStartOneSidePlay(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnStartTargetedByAreaAtk(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnSucceedAttack(BattleDiceBehavior)">
      <summary>攻撃の的中時に呼び出されます。</summary>
      <param name="behavior">攻撃に使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnSucceedAttackEvent(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnTakeBreakDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="breakdmg"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnUnitCreated">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnUseChargeStack">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnWaveStart">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.SpeedDiceBreakedAdder">
      <summary>使用不可にする速度ダイスの加算数を返します。</summary>
      <returns>使用不可にする速度ダイスの加算数。</returns>
    </member>
    <member name="M:PassiveAbilityBase.SpeedDiceNumAdder">
      <summary>速度ダイスの加算数を返します。</summary>
      <returns>速度ダイスの加算数。</returns>
    </member>
    <member name="M:PassiveAbilityBase.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:PassiveAbilityBase.debugDesc">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isActiavted">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isActionable">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isHide">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isImmortal">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isImmuneByFarAtk">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isInvincible">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isInvincibleBp">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isInvincibleHp">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isNegativeHalfExceptBurn">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isStraighten">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isTargetable">
      <summary>このパッシブの所有キャラクターにターゲット可能である事を示す値を取得します。</summary>
    </member>
    <member name="P:PassiveAbilityBase.Owner">
      <summary></summary>
    </member>
    <member name="T:PassiveModel">
      <summary>パッシブのモデル情報を表します。</summary>
    </member>
    <member name="F:PassiveModel.isAddedPassive">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.originData">
      <summary>セーブ データとして保存されていたオリジナル データ</summary>
    </member>
    <member name="F:PassiveModel.originpassive">
      <summary>StaticInfo (PassiveList.txt) に定義された、変更が加えられていないオリジナルのパッシブ情報</summary>
    </member>
    <member name="F:PassiveModel.reservedData">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_bookxmlid">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_currentpassiveid">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_givebookInstanceId">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_isAddedPassiveId">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_originpassiveidid">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_receivebookInstanceId">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.#ctor">
      <summary>
        <see cref="PassiveModel" /> の新しいインスタンスを生成します。</summary>
    </member>
    <member name="M:PassiveModel.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="PassiveModel" /> の新しいインスタンスを生成します。</summary>
      <param name="id">パッシブ ID。</param>
      <param name="bookinstanceid">このパッシブを保有するページ ID。</param>
      <param name="isaddedpassive">0 の場合は有効なパッシブ、0 以外の場合は空きスロットとして追加されたダミー パッシブ (ID が 9999999 のパッシブ) として認識させます。</param>
    </member>
    <member name="M:PassiveModel.#ctor(System.Int32)">
      <summary>
        <see cref="PassiveModel" /> の新しいインスタンスを生成します。</summary>
      <param name="bookinstanceid">このパッシブを保有するページ ID。</param>
    </member>
    <member name="M:PassiveModel.ApplyReserved">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.DeepCopy(PassiveXmlInfo)">
      <summary></summary>
      <param name="passive"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.GetReleaseLevel">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.InitReservedData">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.IsChangedReserved">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.IsGiveFromPassiveModel(PassiveModel)">
      <summary></summary>
      <param name="targetpassive"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:PassiveModel.ReleaseSuccesionGivePassive(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:PassiveModel.ReleaseSuccesionReceivePassive(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:PassiveModel.ResetReservedPassive">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.SetGiveBookId(System.Int32)">
      <summary></summary>
      <param name="instanceid"></param>
    </member>
    <member name="M:PassiveModel.SuccessionPassiveForReserved(PassiveModel)">
      <summary></summary>
      <param name="passivemodel"></param>
    </member>
    <member name="P:PassiveModel.BookInstanceId">
      <summary>このパッシブを保有するページ ID を取得します。</summary>
    </member>
    <member name="P:PassiveModel.CanToGivePassive">
      <summary></summary>
    </member>
    <member name="P:PassiveModel.IsReceivedSuccessionPassive">
      <summary>継承されたパッシブであることを示す値を取得します。</summary>
    </member>
    <member name="T:RandomUtil">
      <summary>乱数操作を行うユーティリティ クラスです。</summary>
    </member>
    <member name="F:RandomUtil.randomValue">
      <summary>.NET Framework に内包された乱数生成オブジェクト</summary>
    </member>
    <member name="M:RandomUtil.#ctor">
      <summary></summary>
    </member>
    <member name="M:RandomUtil.Range(System.Int32,System.Int32)">
      <summary>指定した範囲内のランダムな整数を返します。</summary>
      <param name="min">返される乱数の下限値。この数値は乱数に含まれます。</param>
      <param name="max">返される乱数の上限値。この数値は乱数に含まれます。</param>
      <returns> 以上  以下の 32 ビット符号付整数。</returns>
    </member>
    <member name="M:RandomUtil.RangeFloat(System.Single,System.Single)">
      <summary>指定した範囲内のランダムな実数を返します。</summary>
      <param name="min">返される乱数の下限値。この数値は乱数に含まれます。</param>
      <param name="max">返される乱数の上限値。この数値は乱数に含まれます。</param>
      <returns> 以上  以下の単精度浮動小数点数。</returns>
    </member>
    <member name="M:RandomUtil.SelectOne``1()">
      <summary>指定した配列リストからランダムに要素を一つ選択して返します。</summary>
      <typeparam name="T">配列リストの要素の型。</typeparam>
      <param name="list">選択対象となる配列リスト。</param>
      <returns> に含まれている要素。</returns>
    </member>
    <member name="M:RandomUtil.SelectOne``1(System.Collections.Generic.List{``0})">
      <summary>指定したリストからランダムに要素を一つ選択して返します。</summary>
      <typeparam name="T">リストの要素の型。</typeparam>
      <param name="list">選択対象となるリスト。</param>
      <returns> に含まれている要素。</returns>
    </member>
    <member name="M:RandomUtil.SelectOne``1(,System.Single[])">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <param name="list"></param>
      <param name="probs"></param>
      <returns></returns>
    </member>
    <member name="M:RandomUtil.SystemRange(System.Int32)">
      <summary></summary>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="P:RandomUtil.valueForProb">
      <summary></summary>
    </member>
    <member name="P:RandomUtil.valueForRange">
      <summary></summary>
    </member>
  </members>
</doc>